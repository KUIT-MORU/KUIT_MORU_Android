package com.konkuk.moru.presentation.routinefeed.screen.main

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.google.gson.Gson
import com.konkuk.moru.data.model.DummyData
import com.konkuk.moru.data.model.Routine
import com.konkuk.moru.presentation.navigation.Route
import com.konkuk.moru.presentation.routinefeed.component.Routine.MoruLiveSection
import com.konkuk.moru.presentation.routinefeed.component.Routine.TitledRoutineSection
import com.konkuk.moru.presentation.routinefeed.component.topAppBar.HomeTopAppBar
import com.konkuk.moru.presentation.routinefeed.data.LiveUserInfo
import com.konkuk.moru.presentation.routinefeed.viewmodel.MainViewModel
import com.konkuk.moru.presentation.routinefeed.viewmodel.RoutineFeedUiState
import com.konkuk.moru.presentation.routinefeed.viewmodel.RoutineFeedViewModel

data class RoutineFeedSectionModel(
    val title: String,
    val routines: List<Routine>
)

@Composable
fun RoutineFeedScreen(
    modifier: Modifier = Modifier,
    navController: NavHostController,
    viewModel: RoutineFeedViewModel = hiltViewModel(),
    mainViewModel: MainViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    val hasNotification by mainViewModel.hasUnreadNotification.collectAsState() // [Ï∂îÍ∞Ä]

    Scaffold(
        containerColor = Color.White,
        topBar = {
            HomeTopAppBar(
                onSearchClick = { navController.navigate(Route.RoutineSearch.route) },
                hasNotification = hasNotification, // [ÏàòÏ†ï]
                onNotificationClick = {
                    mainViewModel.onNotificationIconClicked() // [ÏàòÏ†ï]
                    navController.navigate(Route.Notification.route)
                },
                onLogoClick = {}
            )
        }
    ) { paddingValues ->
        RoutineFeedContent(
            modifier = modifier.padding(paddingValues),
            navController = navController,
            liveUsers = uiState.liveUsers,
            routineSections = uiState.routineSections, // ‚úÖ ViewModelÏùò Îç∞Ïù¥ÌÑ∞Î•º Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
            // ‚úÖ onLikeClick Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïòÎ©¥ ViewModelÏùò Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
            onLikeClick = { routineId ->
                viewModel.toggleLike(routineId)
            }
        )
    }
}

@Composable
private fun RoutineFeedContent(
    modifier: Modifier = Modifier,
    navController: NavHostController,
    liveUsers: List<LiveUserInfo>,
    routineSections: List<RoutineFeedSectionModel>,
    onLikeClick: (String) -> Unit
) {
    Surface(modifier = modifier.fillMaxSize(), color = Color.White) {
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White)
        ) {
            item {
                MoruLiveSection(
                    liveUsers = liveUsers,
                    onUserClick = { userId ->
                        navController.navigate(Route.UserProfile.createRoute(userId))
                    },
                    onTitleClick = { println("Live title clicked") }
                )
            }
            item { Spacer(modifier = Modifier.height(14.dp)) }
            items(routineSections) { section ->
                TitledRoutineSection(
                    title = section.title,
                    routines = section.routines,
                    onRoutineClick = { routineId ->
                        section.routines.firstOrNull { it.routineId == routineId }?.let { selected ->
                            navController.currentBackStackEntry
                                ?.savedStateHandle
                                ?.set("selectedRoutineJson", Gson().toJson(selected)) // [ÏàòÏ†ï]
                        }
                        navController.navigate(Route.RoutineFeedDetail.createRoute(routineId))
                    },
                    onMoreClick = { title ->
                        navController.navigate(Route.RoutineFeedRec.createRoute(title))
                    },
                    onLikeClick = onLikeClick
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun RoutineFeedScreenPreview() {
    // 1. ÎØ∏Î¶¨Î≥¥Í∏∞Ïóê ÏÇ¨Ïö©Ìï† ÎçîÎØ∏ ÏÑπÏÖò Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    val previewSections = listOf(
        RoutineFeedSectionModel(
            title = "ÏßÄÍ∏à Í∞ÄÏû• Ìï´Ìïú Î£®Ìã¥ÏùÄ?",
            routines = DummyData.feedRoutines.filter { it.likes > 100 }.take(5)
        ),
        RoutineFeedSectionModel(
            "MORUÎãòÍ≥º Îî± ÎßûÎäî Î£®Ìã¥",
            routines = DummyData.feedRoutines.filter { it.authorId == DummyData.MY_USER_ID }.take(5)
        ),
        RoutineFeedSectionModel(
            "#Í∞úÎ∞ú #TIL",
            routines = DummyData.feedRoutines.filter {
                it.tags.containsAll(listOf("Í∞úÎ∞ú", "TIL"))
            }.take(5)
        )
    )

    MaterialTheme {
        // 2. ÎØ∏Î¶¨Î≥¥Í∏∞Ïö© UI StateÏóê ÏÉùÏÑ±Ìïú ÎçîÎØ∏ ÏÑπÏÖòÏùÑ Ìè¨Ìï®Ìï©ÎãàÎã§.
        val dummyUiState = RoutineFeedUiState(
            hasNotification = true,
            liveUsers = DummyData.dummyLiveUsers,
            routineSections = previewSections // üëà ÏÉùÏÑ±Ìïú ÎçîÎØ∏ ÏÑπÏÖò Ìï†Îãπ
        )

        Scaffold(
            containerColor = Color.White,
            topBar = {
                HomeTopAppBar(
                    onSearchClick = { },
                    hasNotification = dummyUiState.hasNotification,
                    onNotificationClick = {
                    },
                    onLogoClick = {}
                )
            }
        ) { paddingValues ->
            RoutineFeedContent(
                modifier = Modifier.padding(paddingValues),
                navController = rememberNavController(),
                liveUsers = dummyUiState.liveUsers,
                routineSections = dummyUiState.routineSections, // üëà UI StateÏùò ÏÑπÏÖò Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÎã¨
                onLikeClick = {}
            )
        }
    }
}