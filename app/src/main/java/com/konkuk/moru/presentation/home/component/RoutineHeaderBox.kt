package com.konkuk.moru.presentation.home.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import coil3.compose.AsyncImage
import com.google.accompanist.flowlayout.FlowRow
import com.konkuk.moru.R
import com.konkuk.moru.ui.theme.MORUTheme.colors
import com.konkuk.moru.ui.theme.MORUTheme.typography

//ÏßëÏ§ë,Í∞ÑÌé∏ ÌÉÄÏûÖ Î∞ïÏä§ Í∑∏Î¶¨Îäî Ìï®Ïàò
@Composable
fun RoutineHeaderBox(
    routineTitle: String,
    tags: List<String>,
    category: String,
    imageUrl: String? = null,
) {
    // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
    android.util.Log.d("RoutineHeaderBox", "üñºÔ∏è RoutineHeaderBox Î†åÎçîÎßÅ:")
    android.util.Log.d("RoutineHeaderBox", "   - Ï†úÎ™©: $routineTitle")
    android.util.Log.d("RoutineHeaderBox", "   - Ïù¥ÎØ∏ÏßÄ URL: $imageUrl")
    android.util.Log.d("RoutineHeaderBox", "   - Ïù¥ÎØ∏ÏßÄ URLÏù¥ nullÏù¥Í±∞ÎÇò Îπà Î¨∏ÏûêÏó¥Ïù∏Í∞Ä?: ${imageUrl.isNullOrBlank()}")
    Box(
        modifier = Modifier.fillMaxWidth()
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (imageUrl.isNullOrBlank()) {
                // ÏÑúÎ≤ÑÏóêÏÑú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏùÑ Îïå Í∏∞Î≥∏ Ìà¨Î™Ö Î∞ïÏä§ ÌëúÏãú
                Image(
                    painter = painterResource(R.drawable.transparentbox),
                    contentDescription = "Ìà¨Î™Ö Î∞ïÏä§",
                    modifier = Modifier
                        .width(53.dp)
                        .height(52.dp)
                )
            } else {
                // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ Ïù¥ÎØ∏ÏßÄ URL ÏÇ¨Ïö©
                AsyncImage(
                    model = imageUrl,
                    contentDescription = "Î£®Ìã¥ Ïù¥ÎØ∏ÏßÄ",
                    modifier = Modifier
                        .width(53.dp)
                        .height(52.dp),
                    contentScale = ContentScale.Crop,
                    placeholder = painterResource(R.drawable.transparentbox),
                    error = painterResource(R.drawable.transparentbox)
                )
            }
            Spacer(modifier = Modifier.width(12.dp))
            Column(
                modifier = Modifier
                    .weight(1f)
            ){
                Text(
                    text = routineTitle,
                    style = typography.head_EB_24,
                    color = colors.black,
                    maxLines = 2,
                    softWrap = true
                )
                Spacer(modifier = Modifier.height(6.dp))
                FlowRow(
                    mainAxisSpacing = 6.dp,
                    crossAxisSpacing = 4.dp
                ) {
                    tags.forEach { tag ->
                        Text(
                            text = "#$tag",
                            style = typography.body_SB_16,
                            color = colors.darkGray,
                            maxLines = 1
                        )
                    }
                }
            }
            // ÏßëÏ§ë or Í∞ÑÌé∏
            FocusTypeChip(category = category)
        }
    }
}

@Preview(showBackground = true, widthDp = 360)
@Composable
private fun RoutineHeaderBoxPreview() {
    RoutineHeaderBox(
        routineTitle = "Ï£ºÎßê ÏïÑÏπ® Î£®Ìã¥",
        tags = listOf("ÌôîÏù¥ÌåÖ", "Î£®Ìã¥"),
        category = "ÏßëÏ§ë",
        imageUrl = null
    )
}