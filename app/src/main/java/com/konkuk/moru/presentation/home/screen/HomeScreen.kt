package com.konkuk.moru.presentation.home.screen

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Divider
import androidx.compose.material3.FabPosition
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.boundsInRoot
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.konkuk.moru.R
import com.konkuk.moru.presentation.home.FabConstants
import com.konkuk.moru.presentation.home.FocusType
import com.konkuk.moru.presentation.home.component.HomeFloatingActionButton
import com.konkuk.moru.presentation.home.component.HomeTopAppBar
import com.konkuk.moru.presentation.home.component.RoutineCardList
import com.konkuk.moru.presentation.home.component.RoutineData
import com.konkuk.moru.presentation.home.component.TodayRoutinePager
import com.konkuk.moru.presentation.home.component.TodayWeekTab
import com.konkuk.moru.presentation.home.component.WeeklyCalendarView
import com.konkuk.moru.presentation.home.viewmodel.SharedRoutineViewModel
import com.konkuk.moru.presentation.navigation.Route
import com.konkuk.moru.ui.theme.MORUTheme.colors
import com.konkuk.moru.ui.theme.MORUTheme.typography

// Ìôà Î©îÏù∏ ÌéòÏù¥ÏßÄ
@Composable
fun HomeScreen(
    navController: NavHostController,
    sharedViewModel: SharedRoutineViewModel,
    modifier: Modifier = Modifier,
    fabOffsetY: MutableState<Float>,
    todayTabOffsetY: MutableState<Float>,
    onShowOnboarding: () -> Unit = {},
    bottomIconCenters: SnapshotStateList<Offset>
) {
    //ÌÉ≠ ÏÑ†ÌÉù ÏÉÅÌÉú(Ïò§Îäò,Ïù¥Î≤àÏ£º)
    var selectedTab by remember { mutableStateOf(0) }

    // Î£®Ìã¥ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞(Ïò§Îäò ÌÉ≠ ÏÑ†ÌÉù Ïãú Î≥¥Ïó¨Ï§Ñ Î∞ïÏä§Ïùò ÎÇ¥Ïö©Îì§)
    val sampleRoutines = listOf(
        RoutineData("Ï£ºÎßê ÏïÑÏπ® Î£®Ìã¥", "#ÌôîÏù¥ÌåÖ", 25, "ÌÜ†Ïùº", "am 09:00 ~ am 09:58"),
        RoutineData("Ï∂úÍ∑º Ï§ÄÎπÑ Î£®Ìã¥", "#ÌûòÎÇ¥Ïûê", 41, "Ïõî", "am 08:00 ~ am 08:45"),
        RoutineData("Ïö¥Îèô Î£®Ìã¥", "#Í±¥Í∞ï", 12, "Ïàò", "pm 06:00 ~ pm 07:00")
    )

    //Î£®Ìã¥ ÌÉúÍ∑∏ ÏÉòÌîå(Ïù¥Î≤àÏ£º ÌÉ≠ ÏÑ†ÌÉù Ïãú Îã¨Î†• ÎÇ†ÏßúÏóê Îì§Ïñ¥Í∞à Í≤ÉÎì§)
    val sampleRoutineTags = mapOf(
        8 to listOf("ÏïÑÏπ® Ïö¥Îèô", "ÌöåÏùò"),
        10 to listOf("ÏïÑÏπ® Ïö¥Îèô"),
        12 to listOf("ÏïÑÏπ® Ïö¥Îèô", "ÌöåÏùò"),
        13 to listOf("Ï£ºÎßêÏïÑÏπ®Î£®Ìã¥"),
        14 to listOf("Ï£ºÎßêÏïÑÏπ®Î£®Ìã¥")
    )
    Scaffold(
        containerColor = Color.White,
        //FAB
        floatingActionButton = {
            HomeFloatingActionButton(
                modifier = Modifier
                    .offset(y = -FabConstants.FabTotalBottomPadding)
                    .onGloballyPositioned { layoutCoordinates ->
                        val position = layoutCoordinates.positionInRoot()
                        val size = layoutCoordinates.size
                        val centerY = position.y + size.height / 2f
                        fabOffsetY.value = centerY
                        Log.d("FAB_POSITION", "FAB Y Offset: $centerY")
                    },
                onClick = { /* ÌÅ¥Î¶≠ Ï≤òÎ¶¨ */ }
            )
        },
        floatingActionButtonPosition = FabPosition.End, // ‚Üê Ïù¥Í±∏ Ï∂îÍ∞Ä
    ) { innerPadding ->

        val isTodayTabMeasured = remember { mutableStateOf(false) }

        LaunchedEffect(todayTabOffsetY.value, fabOffsetY.value) {
            Log.d("ONBOARDING_TRIGGER", "=== Onboarding Trigger Check ===")
            Log.d("ONBOARDING_TRIGGER", "- todayTabOffsetY: ${todayTabOffsetY.value}")
            Log.d("ONBOARDING_TRIGGER", "- fabOffsetY: ${fabOffsetY.value}")

            // Îëê Í∞íÏù¥ Î™®Îëê Ï∏°Ï†ïÎêòÏóàÏùÑ ÎïåÎßå Ïò®Î≥¥Îî© ÏãúÏûë
            if (todayTabOffsetY.value > 0f && fabOffsetY.value > 0f) {
                Log.d("ONBOARDING_TRIGGER", "‚úÖ Both positions ready. Triggering onboarding.")
                onShowOnboarding()
            } else {
                Log.d("ONBOARDING_TRIGGER", "‚ùå Waiting for positions...")
            }
        }



        LazyColumn(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
//            item {
//                // ÏÉÅÎã® ÏÉÅÌÉú Î∞î
//                StatusBarMock(isDarkMode = true)
//            }
            item {
                //Î°úÍ≥†ÏôÄ MORU
                HomeTopAppBar()
            }
            item {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(111.dp)
                ) {
                    // 1.Ïù∏ÏÇøÎßê
                    Text(
                        text = "XXÎãò,\nÏò§ÎäòÏùÄ Ïñ¥Îñ§ Î£®Ìã¥ÏùÑ ÏãúÏûëÌï†ÍπåÏöî?",
                        style = typography.title_B_20.copy(
                            lineHeight = 30.sp
                        ),
                        color = colors.black,
                        modifier = Modifier
                            .align(Alignment.TopStart)                  // Box ÏïàÏùò Ï¢åÏÉÅÎã®
                            .padding(                                   // ‚Üê ÎÇ¥Ïö© Ïó¨Î∞±
                                start = 16.dp,
                                top = 26.dp,
                                bottom = 25.dp
                            )
                    )
                }
            }
            item {
                Divider(
                    modifier = Modifier
                        .fillMaxWidth(),
                    color = colors.lightGray,
                    thickness = 1.dp
                )
            }
            item {
                Spacer(Modifier.height(8.dp))
            }
            item {
                Log.d("LAYOUT_DEBUG", "üîπ LazyColumn item is being composed")

                Column(
                    modifier = Modifier
                        .onGloballyPositioned { coordinates ->
                            Log.d("LAYOUT_DEBUG", "üîπ Column onGloballyPositioned called")
                            val boundsInRoot = coordinates.boundsInRoot()
                            Log.d("LAYOUT_DEBUG", "Column bounds: $boundsInRoot")
                        }
                ) {
                    Log.d("LAYOUT_DEBUG", "üîπ Inside Column composition")

                    // 2. TODAY ÌÖçÏä§Ìä∏
                    Text(
                        modifier = Modifier
                            .padding(horizontal = 16.dp)
                            .onGloballyPositioned { coordinates ->
                                Log.d("LAYOUT_DEBUG", "üîπ TODAY Text positioned")
                                val boundsInRoot = coordinates.boundsInRoot()
                                Log.d("LAYOUT_DEBUG", "TODAY text bounds: $boundsInRoot")
                            },
                        text = "TODAY",
                        style = typography.desc_M_16.copy(
                            fontWeight = FontWeight.Bold,
                            lineHeight = 24.sp
                        ),
                        color = colors.black,
                    )

                    // 3. Ïõî Ïùº ÏöîÏùº
                    Text(
                        modifier = Modifier
                            .padding(horizontal = 16.dp)
                            .onGloballyPositioned { coordinates ->
                                Log.d("LAYOUT_DEBUG", "üîπ Date Text positioned")
                                val boundsInRoot = coordinates.boundsInRoot()
                                Log.d("LAYOUT_DEBUG", "Date text bounds: $boundsInRoot")
                            },
                        text = "5Ïõî 10Ïùº ÌÜ†",
                        style = typography.head_EB_24.copy(
                            lineHeight = 24.sp
                        ),
                        color = colors.black
                    )

                    // 4. ÏÉÅÌÉú ÌÖçÏä§Ìä∏
                    Text(
                        modifier = Modifier
                            .padding(horizontal = 16.dp)
                            .onGloballyPositioned { coordinates ->
                                Log.d("LAYOUT_DEBUG", "üîπ Status Text positioned")
                                val boundsInRoot = coordinates.boundsInRoot()
                                Log.d("LAYOUT_DEBUG", "Status text bounds: $boundsInRoot")
                            },
                        text = if (sampleRoutines.isNotEmpty()) "Ï†ïÍ∏∞ Î£®Ìã¥Ïù¥ ÏûàÎäî ÎÇ†Ïù¥ÏóêÏöî" else "Ï†ïÍ∏∞ Î£®Ìã¥Ïù¥ ÏóÜÎäî ÎÇ†Ïù¥ÏóêÏöî",
                        style = typography.desc_M_16.copy(
                            fontWeight = FontWeight.Bold,
                            lineHeight = 24.sp
                        ),
                        color = colors.black
                    )

                    Spacer(modifier = Modifier.height(12.dp))

                    // 5. TodayWeekTab ÎûòÌçº Box
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 16.dp)
                            .onGloballyPositioned { coordinates ->
                                val boundsInRoot = coordinates.boundsInRoot()
                                val centerY = boundsInRoot.center.y

                                Log.d("TAB_FINAL", "=== Final Tab Position ===")
                                Log.d("TAB_FINAL", "Tab Box bounds: $boundsInRoot")
                                Log.d("TAB_FINAL", "Tab centerY: $centerY")

                                if (centerY > 0f) {
                                    todayTabOffsetY.value = centerY
                                    Log.d("TAB_FINAL", "‚úÖ Final todayTabOffsetY set to: $centerY")
                                }
                            }
                    ) {
                        // ÏõêÎûò TodayWeekTab ÏÇ¨Ïö©
                        TodayWeekTab(
                            selectedTabIndex = selectedTab,
                            onTabSelected = { selectedTab = it }
                        )
                    }


                    // ÏÑ†ÌÉùÎêú ÌÉ≠Ïóê Îî∞Îùº ÏΩòÌÖêÏ∏† Î∂ÑÍ∏∞
                    when (selectedTab) {
                        // Ïò§Îäò ÌÉ≠ ÏÑ†ÌÉù Ïãú
                        0 -> if (sampleRoutines.isNotEmpty()) {
                            TodayRoutinePager(
                                routines = sampleRoutines,
                                onRoutineClick = {
                                    //Focus ÌÉÄÏûÖÏóê Îî∞Îùº Îú®Îäî introÌôîÎ©¥Ïù¥ Îã§Î¶Ñ
                                    sharedViewModel.setFocusType(FocusType.FOCUS)
                                    navController.navigate(Route.RoutineFocusIntro.route)
                                }
                            )
                        }

                        // Ïù¥Î≤àÏ£º ÌÉ≠ ÏÑ†ÌÉù Ïãú
                        1 -> {
                            WeeklyCalendarView(
                                routinesPerDate = sampleRoutineTags,
                                today = 13
                            )
                        }
                    }

                    HorizontalDivider(
                        modifier = Modifier
                            .fillMaxWidth(),
                        thickness = 7.dp,
                        color = colors.lightGray
                    )
                    //Î£®Ìã¥ Î™©Î°ù
                    Row(
                        modifier = Modifier.padding(top = 3.dp, start = 16.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Î£®Ìã¥ Î™©Î°ù",
                            style = typography.desc_M_16.copy(fontWeight = FontWeight.Bold),
                            color = colors.black
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Image(
                            painter = painterResource(id = R.drawable.ic_arrow_c),
                            contentDescription = "Ïò§Î•∏Ï™Ω ÌôîÏÇ¥Ìëú",
                            modifier = Modifier
                                .size(width = 8.dp, height = 12.dp)
                        )
                    }
                    // ÌõÑÏóê Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú Ïò§Îäò Î£®Ìã¥Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
                    if (sampleRoutines.isNotEmpty()) {
                        RoutineCardList()
                    }
                }
            }
        }
    }
}

@Preview(
    showBackground = true,
    widthDp = 360,
    heightDp = 800,
)
@Composable
private fun HomeScreenPreview() {
    val fakeNavController = rememberNavController()
    val previewSharedViewModel = SharedRoutineViewModel()
    val previewFabOffsetY = remember { mutableStateOf(0f) } // üîπ Ï∂îÍ∞Ä
    val todayTabOffsetY = remember { mutableStateOf(0f) } // üîπ Ï∂îÍ∞Ä
    val previewBottomIconCenters = remember { mutableStateListOf<Offset>() }

    HomeScreen(
        navController = fakeNavController,
        sharedViewModel = previewSharedViewModel,
        fabOffsetY = previewFabOffsetY,
        todayTabOffsetY = todayTabOffsetY,
        bottomIconCenters = previewBottomIconCenters
    )
}